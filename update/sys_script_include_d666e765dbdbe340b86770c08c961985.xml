<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_naci_future_fell.FutureFellows</api_name>
        <client_callable>false</client_callable>
        <description>Contains functions for adding, searching, and updating applicants as well as retrieving form fields.</description>
        <name>FutureFellows</name>
        <script><![CDATA[/** Import modules/functions */
var _ = Lodash._;
var updateRecord = RecordUtils.updateRecord;
var insertRecord = RecordUtils.insertRecord;
var getRecords = RecordUtils.getRecords;
var getChoices = RecordUtils.getChoices;

/** Export FutureFellows module */
var FutureFellows = {
	getFields: getFields,
	createApplicant: createApplicant,
	getApplicant: getApplicant,
	updateApplicant: updateApplicant,
	searchApplicants: searchApplicants,
	createUserHistory: addUserHistory,
	getUserHistory: getUserHistory,
	constants: {
		applicantTable: 'x_naci_future_fell_applicant',
		educationTable: 'x_naci_future_fell_education',
		publicationTable: 'x_naci_future_fell_publication',
		userHistoryTable: 'x_naci_future_fell_user_history',
		applicantAttachmentFields: [
			'resume_file',
			'references_file'
		],
		applicantFields: [
			'first_name', 
			'middle_initial', 
			'last_name',
			'email',
			'email_2',
			'address',
			'address_2',
			'city',
			'state',
			'postal_code',
			'country',
			'home_phone',
			'work_phone',
			'fax_phone',
			'citizenship',
			'job_category',
			'scientific_focus',
			'total_publications',
			'total_abstracts',
			'total_presentations',
			'research_interests',
			'experience',
			'referral_source',
			'availability_date',
		],
		educationFields: [
			'degree', 
			'major', 
			'institution', 
			'year',
			'gpa',
		],
		publicationFields: [
			'title',
			'journal',
			'year',
		],
		ignoredFields: [

		],
		userActions: [
			'ADD_APPLICANT',
			'APPROVE_APPLICANT',
			'REMOVE_APPLICANT',
			'UPDATE_APPLICANT_DETAILS',
			'DOWNLOAD_APPLICANT_DETAILS',
		]
	}
};

function validateApplicant(params) {
	return true;
	var validate = ValidationUtils.validate;
	var required = ValidationUtils.required;
	var pattern = ValidationUtils.pattern;
	var maxLength = ValidationUtils.maxLength;

	return validate(params, {
		first_name: [required, maxLength(255)],
		middle_initial: [maxLength(255)],
		last_name: [required, maxLength(255)],
		email: [required, pattern(/\@/)],

	});
}

function createApplicant(params) {
	if (!validateApplicant(params)) return false;
	var constants = FutureFellows.constants;

	var applicantTable = constants.applicantTable;
	var applicantFields = constants.applicantFields;
	var applicantAttachmentFields = constants.applicantAttachmentFields;

	var educationTable = constants.educationTable;
	var educationFields = constants.educationFields;

	var publicationTable = constants.publicationTable;
	var publicationFields = constants.publicationFields;

	// insert applicant record
	var applicantParams = {};
	applicantFields.forEach(function(fieldName) {
		applicantParams[fieldName] = params[fieldName];
	});
	var grApplicant = RecordUtils.insertRecord(applicantTable, applicantParams);
	var applicantId = grApplicant.getUniqueValue();

	// insert education records
	params.education.forEach(function(educationItem) {
		educationItem.applicant = applicantId;
		insertRecord(educationTable, educationItem);
	});

	// insert publication records
	params.publications.forEach(function(publicationItem) {
		publicationItem.applicant = applicantId;
		insertRecord(publicationTable, publicationItem);
	});

	// add attachments to the applicant record
	applicantAttachmentFields.forEach(function(fieldName) {
		var attachment = new GlideSysAttachment();
		var filename = fieldName + '.pdf';
		var parts = params[fieldName].split(',');
		var mimetype = parts[0].replace(/(^data:)|(;base64$)/g, '');
		var content = parts[1];
		attachment.writeBase64(grApplicant, filename,  mimetype, content);
	});

	return true;
}

function getApplicant(applicantId) {
	var applicantTable = FutureFellows.constants.applicantTable;
	var educationTable = FutureFellows.constants.educationTable;
	var publicationTable = FutureFellows.constants.publicationTable;

	var applicantFields = FutureFellows.constants.applicantFields;
	var educationFields = FutureFellows.constants.educationFields;
	var publicationFields = FutureFellows.constants.publicationFields;

	var applicant = RecordUtils.getRecord(applicantTable, applicantId);
	applicant.scientific_focus = applicant.scientific_focus.split(',');
	applicant.other_scientific_focus = applicant.scientific_focus.filter(function(item) {
		return item.indexOf('.') > -1;
	});

	applicant.resume_file_name = 'resume.pdf';
	applicant.references_file_name = 'references.pdf';

	// retrieve education fields
	applicant.education = RecordUtils.getRecords(
		educationTable,
		[['applicant', applicant.sys_id]],
		{orderBy: 'year', descending: true}
	).map(function(row) {
		row = _.pick(row, educationFields);
		row.year = +row.year || null;
		row.gpa = +row.gpa || null;
		return row;
	}).sort(function(a, b) {
		return a.year > (b.year || 0);
	});

	applicant.publications = RecordUtils.getRecords(
		publicationTable, 
		[['applicant', applicant.sys_id]],
		{orderBy: 'year', descending: true}
	).map(function(row) {
		row = _.pick(row, publicationFields);
		row.year = +row.year || null;
		return row;
	});

	var allowedFields = applicantFields.concat([
		'sys_id',
		'publications', 
		'education',
		'resume_file_name',
		'references_file_name',
	]);

	applicant = _.pick(applicant, allowedFields);
	applicant.total_publications = +applicant.total_publications || null;
	applicant.total_abstracts = +applicant.total_abstracts || null;
	applicant.total_presentations = +applicant.total_presentations || null;

	return applicant;
}

function updateApplicant(applicantId, params) {
	if (!validateApplicant(params)) return false;

	var applicantTable = FutureFellows.constants.applicantTable;
	RecordUtils.updateRecord(applicantTable, applicantId, params);

	return true;
}

function searchApplicants(params) {
	var applicantTable = FutureFellows.constants.applicantTable;

	var applicants = RecordUtils.getRecords(applicantTable);
	var fields = getFields();

	return applicants.map(function(applicant) {
		applicant.name = applicant.first_name + ' ' + applicant.last_name;
		applicant.submitted_date = applicant.sys_created_on.split(' ')[0];


		applicant.citizenship_label = _.find(
			fields.citizenship, 
			{value: applicant.citizenship}
		).label;

		applicant.job_category_label = _.find(
			fields.job_category,
			{value: applicant.job_category}
		).label;

		applicant.scientific_focus = applicant.scientific_focus.split(',');
		applicant.scientific_focus_label = applicant.scientific_focus.filter(function(scientific_focus) {
			return scientific_focus.indexOf('.') == -1;
		}).map(function(scientific_focus) {
			return _.find(
				fields.scientific_focus,
				{value: scientific_focus}
			).label;
		});

		return applicant;
	});
}

function sendEmail(recipient, contents, attachments) {
	var eventParams = {
		recipient: recipient,
		contents: contents,
		attachments: attachments || []
	};
}

function validateUserHistoryRecord(params) {
	return true;
}

function addUserHistory(params) {
	if (!validateUserHistoryRecord(params))
		return false;

	var userHistoryTable = FutureFellows.constants.userHistoryTable;
	return TableUtil.insertRecord(userHistoryTable, params);
}

function getUserHistory(queries) {
	var userHistoryTable = FutureFellows.constants.userHistoryTable;
	return TableUtil.getRecords(userHistoryTable, queries);
}

function getFields() {
	/** Tables with field choices we need */
	var applicantTable = FutureFellows.constants.applicantTable;
	var educationTable = FutureFellows.constants.educationTable;

	/** Fields which have choice lists */
	var fieldLookup = [
		{tableName: applicantTable, fieldName: 'citizenship'},
		{tableName: applicantTable, fieldName: 'job_category'},
		{tableName: applicantTable, fieldName: 'scientific_focus'},
		{tableName: applicantTable, fieldName: 'state'},
		{tableName: applicantTable, fieldName: 'country'},
		{tableName: educationTable, fieldName: 'degree'},
	];

	/** 
	 * Create an object where each key is the name of a field
	 * and each value is an array of choices for that field 
	 */
	var fields = fieldLookup.reduce(function(obj, lookup) {
		var fieldName = lookup.fieldName;
		var tableName = lookup.tableName;
		/* retrieve labels/values for all choices */
		obj[fieldName] = getChoices(tableName, fieldName);
		return obj;
	}, {});

	/* convert scientific_focus to a tree */
	fields.scientific_focus = createTree(
		fields.scientific_focus
	);

	return fields;
}



/**
	 * Creates a tree from a flat array of items
	 * where each item has a 'value' property
	 * that tells us its parents
	 * eg: an item with a value of "1.2"
	 * has a parent with a value of "1"
	 */
function createTree(items, separator) {
	separator = separator || '.';

	var tree = [];
	items.forEach(function(item) {
		var value = item.value.split(separator);

		if (value.length <= 1) {
			tree.push(item);
			return;
		}

		var parentValue = value[value.length - 2];
		var parents = items.filter(function(e) {
			return e.value == parentValue;
		})

		if (parents.length > 0) {
			var parent = parents[0];
			if (!parent.children)
				parent.children = [];
			parent.children.push(item);
		}
	});
	return tree;		
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>parkbw@nih.gov</sys_created_by>
        <sys_created_on>2019-01-29 16:38:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d666e765dbdbe340b86770c08c961985</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>FutureFellows</sys_name>
        <sys_package display_value="Future Fellows" source="x_naci_future_fell">34c0a415db0ba700b86770c08c9619dc</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Future Fellows">34c0a415db0ba700b86770c08c9619dc</sys_scope>
        <sys_update_name>sys_script_include_d666e765dbdbe340b86770c08c961985</sys_update_name>
        <sys_updated_by>ff_admin</sys_updated_by>
        <sys_updated_on>2019-03-06 18:39:09</sys_updated_on>
    </sys_script_include>
</record_update>
